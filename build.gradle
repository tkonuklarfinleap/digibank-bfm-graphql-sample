buildscript {
  ext {
    springBootVersion = '2.0.4.RELEASE'
    gradlePropdepsPluginVersion = '0.0.9.RELEASE'
    gradleDockerComposePluginVersion = '0.8.7'
  }
  repositories {
    jcenter()
    mavenCentral()
    maven {
      url 'http://repo.spring.io/plugins-release'
    }
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath("io.spring.gradle:propdeps-plugin:${gradlePropdepsPluginVersion}")
    classpath("com.avast.gradle:gradle-docker-compose-plugin:${gradleDockerComposePluginVersion}")
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.10'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'project-report'
apply plugin: 'checkstyle'
apply plugin: 'docker-compose'
apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-idea'
apply plugin: 'propdeps-eclipse'

group 'solutions.infinitec.nova'

bootJar {
  archiveName = 'infinitec.jar'
}

sourceCompatibility = JavaVersion.VERSION_1_10
targetCompatibility = JavaVersion.VERSION_1_10

repositories {
  mavenCentral()
}

dependencyManagement {
  imports {
    mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
  }
}

dependencyManagement {
  dependencies {
    dependency 'io.vavr:vavr:0.9.2'
    dependency 'org.immutables:value:2.7.1'
    dependency 'org.projectlombok:lombok:1.18.2'
    dependency 'info.solidsoft.mockito:mockito-java8:2.3.0'
    dependency 'org.mockito:mockito-junit-jupiter:2.21.0'
    dependency 'com.puppycrawl.tools:checkstyle:8.12'
  }
}

dependencies {
  //API
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.boot:spring-boot-starter-actuator'
  compile 'io.micrometer:micrometer-registry-prometheus'

  //PERSISTENCE
  // compile('org.springframework.boot:spring-boot-starter-data-jpa')
  // compile('org.springframework.boot:spring-boot-starter-jooq')

  // runtime('org.postgresql:postgresql')

  //COMMON
  compile('io.vavr:vavr')
  compileOnly('org.projectlombok:lombok')
  provided 'org.immutables:value'

  //LOGGING
  compile 'de.appelgriepsch.logback:logback-gelf-appender:1.5'

  //TESTS
  testCompile 'org.assertj:assertj-core'
  testCompile 'info.solidsoft.mockito:mockito-java8'
  testCompile 'org.springframework.boot:spring-boot-starter-test'
  testCompile 'io.rest-assured:rest-assured'
  testImplementation 'org.junit.jupiter:junit-jupiter-api'
  testImplementation 'org.junit.jupiter:junit-jupiter-params'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation 'org.mockito:mockito-junit-jupiter'

  //CODE QUALITY
  checkstyle 'com.puppycrawl.tools:checkstyle'
}

configurations {
  // We don't want to use logback.
  all*.exclude group: 'org.apache.logging.log4j'
}

test {
  useJUnitPlatform()

  // Remove after archiving of test reports in Docker is done.
  ignoreFailures = ignoreTestFailures.toBoolean()

  // set heap size for the test JVM
  minHeapSize = "256m"
  maxHeapSize = "256m"

  reports {
    junitXml.enabled = true
    html.enabled = true
  }
}

idea {
  module {
    sourceDirs += file('src/main/generated')
    testSourceDirs += file('src/test/generated_tests')
  }
}

tasks.withType(Checkstyle) {
  configFile = file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
  reports {
    xml.enabled = false
    html.enabled = generateHtmlReports.toBoolean()
  }
  exclude '**/generated/**'
}

test {
  useJUnitPlatform {
    excludeTags 'integration-test'
  }
}

task integrationTest(type: Test, description: 'Runs the integration tests.', group: LifecycleBasePlugin.VERIFICATION_GROUP) {
  beforeTest { descriptor ->
    logger.lifecycle("Running test: ${descriptor}")
  }
  useJUnitPlatform {
    includeTags 'integration-test'
  }
}

check.dependsOn(integrationTest)

dockerCompose {
  useComposeFiles = ['docker-compose-integration-test.yml']
}
