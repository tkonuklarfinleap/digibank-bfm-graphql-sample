buildscript {
  ext {
    springCloudVersion = 'Greenwich.RELEASE'
    jaxbVersion = '2.3.1'
  }
  dependencies {
    classpath "org.glassfish.jaxb:jaxb-runtime:${jaxbVersion}" // to be removed after jooq no longer uses it
  }
}

plugins {
  id 'java'
  id 'idea'
  id 'project-report'
  id 'checkstyle'
  id 'jacoco'

  id 'io.spring.dependency-management' version '1.0.6.RELEASE'
  id 'org.springframework.boot' version '2.1.1.RELEASE'
  id 'com.avast.gradle.docker-compose' version '0.8.12'
  id 'com.gorylenko.gradle-git-properties' version '1.5.2'
}

wrapper {
  gradleVersion = '5.1'
}

group 'solutions.infinitec.nova'

bootJar {
  archiveBaseName = 'application'
  archiveVersion = null // can be changed to archiveFileName after gradle plugin is updated
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
  mavenCentral()
  maven {
    url 'http://repo.spring.io/milestone'
  }
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

dependencyManagement {
  dependencies {
    dependency 'io.vavr:vavr:0.10.0'
    dependency 'org.immutables:value:2.7.4'
    dependency 'org.projectlombok:lombok:1.18.4'
    dependency 'info.solidsoft.mockito:mockito-java8:2.5.0'
    dependency 'com.puppycrawl.tools:checkstyle:8.16'
    dependency 'de.siegmar:logback-gelf:1.1.0'
    dependency 'org.springframework.cloud:spring-cloud-starter-sleuth:2.0.1.RELEASE'
  }
}

dependencies {
  //API
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.boot:spring-boot-starter-actuator'
  compile 'io.micrometer:micrometer-registry-prometheus'

  // CLOUD CONFIG
  compile 'org.springframework.retry:spring-retry'
  compile 'org.springframework.cloud:spring-cloud-starter-config'
  compile 'org.springframework.cloud:spring-cloud-starter-bus-kafka'

  //SERVICE DISCOVERY
  compile 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

  // PERSISTENCE
//  compile 'org.springframework.boot:spring-boot-starter-jooq'
//  jooqRuntime 'org.postgresql:postgresql'
//  jooqRuntime 'javax.activation:activation'
//  jooqRuntime 'org.glassfish.jaxb:jaxb-runtime'
//  runtime 'org.postgresql:postgresql'
//  compile 'org.flywaydb:flyway-core'

  //COMMON
  implementation 'io.vavr:vavr'
  annotationProcessor 'org.projectlombok:lombok'
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.immutables:value'
  compileOnly 'org.immutables:value'

  //LOGGING
  compile 'de.siegmar:logback-gelf'
  compile 'org.springframework.cloud:spring-cloud-starter-sleuth'

  //TESTS
  testCompile 'org.assertj:assertj-core'
  testCompile 'info.solidsoft.mockito:mockito-java8'
  testCompile 'org.springframework.boot:spring-boot-starter-test'
  testCompile 'io.rest-assured:rest-assured'
  testImplementation 'org.junit.jupiter:junit-jupiter-api'
  testImplementation 'org.junit.jupiter:junit-jupiter-params'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation 'org.mockito:mockito-junit-jupiter'
  testImplementation 'org.springframework.cloud:spring-cloud-stream-test-support'

  //CODE QUALITY
  checkstyle 'com.puppycrawl.tools:checkstyle'
}

configurations {
  // We don't want to use log4j.
  all*.exclude group: 'org.apache.logging.log4j'
}

test {
  useJUnitPlatform()

  // Remove after archiving of test reports in Docker is done.
  ignoreFailures = ignoreTestFailures.toBoolean()

  // set heap size for the test JVM
  minHeapSize = "256m"
  maxHeapSize = "256m"

  reports {
    junitXml.enabled = true
    html.enabled = true
  }
}

idea {
  module {
    sourceDirs += file('src/main/generated')
    testSourceDirs += file('src/test/generated_tests')
  }
}

tasks.withType(Checkstyle) {
  configFile = file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
  reports {
    xml.enabled = false
    html.enabled = generateHtmlReports.toBoolean()
  }
  exclude '**/generated/**'
}

test {
  useJUnitPlatform {
    excludeTags 'integration-test'
  }
}

task integrationTest(type: Test, description: 'Runs the integration tests.', group: LifecycleBasePlugin.VERIFICATION_GROUP) {
  beforeTest { descriptor ->
    logger.lifecycle("Running test: ${descriptor}")
  }
  useJUnitPlatform {
    includeTags 'integration-test'
  }
}

check.dependsOn(integrationTest)

dockerCompose {
  useComposeFiles = ['docker-compose-integration-test.yml']
}
